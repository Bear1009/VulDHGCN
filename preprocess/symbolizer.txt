import wordninja as wn
from typing import List
import warnings

warnings.filterwarnings("ignore")
import re

# Sets for operators
operators3 = {'<<=', '>>='}
operators2 = {
    '->', '++', '--', '!~', '<<', '>>', '<=', '>=', '==', '!=', '&&', '||',
    '+=', '-=', '*=', '/=', '%=', '&=', '^=', '|='
}
operators1 = {
    '(', ')', '[', ']', '.', '+', '-', '*', '&', '/', '%', '<', '>', '^', '|',
    '=', ',', '?', ':', ';', '{', '}', '!', '~'
}

# keywords up to C11 and C++17; immutable set
# keywords 是一个包含关键字的 frozenset（不可变集合）。
# 它包含了 C++ 编程语言中的关键字，用于在代码分析和处理过程中进行关键字的判断和处理。
keywords = frozenset({
    '__asm', '__builtin', '__cdecl', '__declspec', '__except', '__export',
    '__far16', '__far32', '__fastcall', '__finally', '__import', '__inline',
    '__int16', '__int32', '__int64', '__int8', '__leave', '__optlink',
    '__packed', '__pascal', '__stdcall', '__system', '__thread', '__try',
    '__unaligned', '_asm', '_Builtin', '_Cdecl', '_declspec', '_except',
    '_Export', '_Far16', '_Far32', '_Fastcall', '_finally', '_Import',
    '_inline', '_int16', '_int32', '_int64', '_int8', '_leave', '_Optlink',
    '_Packed', '_Pascal', '_stdcall', '_System', '_try', 'alignas', 'alignof',
    'and', 'and_eq', 'asm', 'auto', 'bitand', 'bitor', 'bool', 'break', 'case',
    'catch', 'char', 'char16_t', 'char32_t', 'class', 'compl', 'const',
    'const_cast', 'constexpr', 'continue', 'decltype', 'default', 'delete',
    'do', 'double', 'dynamic_cast', 'else', 'enum', 'explicit', 'export',
    'extern', 'false', 'final', 'float', 'for', 'friend', 'goto', 'if',
    'inline', 'int', 'long', 'mutable', 'namespace', 'new', 'noexcept', 'not',
    'not_eq', 'nullptr', 'operator', 'or', 'or_eq', 'override', 'private',
    'protected', 'public', 'register', 'reinterpret_cast', 'return', 'short',
    'signed', 'sizeof', 'static', 'static_assert', 'static_cast', 'struct',
    'switch', 'template', 'this', 'thread_local', 'throw', 'true', 'try',
    'typedef', 'typeid', 'typename', 'union', 'unsigned', 'using', 'virtual',
    'void', 'volatile', 'wchar_t', 'while', 'xor', 'xor_eq', 'NULL'
})
# 在这段代码中，首先打开名为 "data/sensiAPI.txt" 的文件，并读取其中的内容。
# 假设该文件的内容是以逗号分隔的一些字符串。将读取的内容使用 split(',') 方法拆分成一个字符串列表 a。
with open(r"data/sensiAPI.txt",
          "r") as f:
    a = f.read().split(',')
# 将 keywords 和 a 进行合并，即将 a 中的字符串添加到 keywords 中，得到更新后的关键字集合。
keywords = keywords.union(a)
# holds known non-user-defined functions; immutable set
# main_set 是一个不可变的集合（frozenset），它包含了已知的非用户定义函数的名称。在这里，它包含一个名称为 "main" 的函数。
main_set = frozenset({'main'})
# arguments in main function; immutable set
# main_args 是一个不可变的集合，它包含了在 "main" 函数中使用的参数名称。在这里，它包含两个参数名称，分别是 "argc" 和 "argv"。
main_args = frozenset({'argc', 'argv'})
# 这些集合在代码分析和处理过程中可能用于进行特定函数或参数的识别和处理。


# 将一组代码语句转换为它们的符号表示形式。
def clean_gadget(gadget: List[str]):
    """
    change a list of code statements to their symbolic representations
    Args:
        gadget: a list of code statements

    Returns:

    """
    # 函数还使用了两个字典 fun_symbols 和 var_symbols，
    # 分别用于将函数名和变量名映射到符号名称加上编号。它们用于保持已识别的函数和变量的唯一性。
    # dictionary; map function name to symbol name + number
    fun_symbols = {}
    # dictionary; map variable name to symbol name + number
    var_symbols = {}

    fun_count = 1
    var_count = 1

    # regular expression to catch multi-line comment
    # rx_comment = re.compile('\*/\s*$')
    # regular expression to find function name candidates
    # 函数中使用了几个正则表达式来识别函数名和变量名的候选项。其中，rx_fun 用于匹配函数名候选项，rx_var 用于匹配变量名候选项。
    rx_fun = re.compile(r'\b([_A-Za-z]\w*)\b(?=\s*\()')
    # regular expression to find variable name candidates
    # rx_var = re.compile(r'\b([_A-Za-z]\w*)\b(?!\s*\()')
    rx_var = re.compile(
        r'\b([_A-Za-z]\w*)\b(?:(?=\s*\w+\()|(?!\s*\w+))(?!\s*\()')

    # final cleaned gadget output to return to interface
    # 将处理后的代码语句添加到 cleaned_gadget 列表中，并将列表作为函数的返回值。
    cleaned_gadget = []

'''
    函数首先对代码语句进行一系列的处理，如移除字符串文字、字符文字以及非ASCII字符。然后，通过正则表达式匹配出函数名和变量名候选项。
    对于每个匹配到的函数名和变量名，如果它们不属于已知的关键字或特定的函数名/参数名集合，就将其替换为相应的符号名称。
'''

    for line in gadget:
        # process if not the header line and not a multi-line commented line
        # if rx_comment.search(line) is None:
        # remove all string literals (keep the quotes)
        nostrlit_line = re.sub(r'".*?"', '""', line)
        # remove all character literals
        nocharlit_line = re.sub(r"'.*?'", "''", nostrlit_line)
        # replace any non-ASCII characters with empty string
        ascii_line = re.sub(r'[^\x00-\x7f]', r'', nocharlit_line)

        # return, in order, all regex matches at string list; preserves order for semantics
        user_fun = rx_fun.findall(ascii_line)
        user_var = rx_var.findall(ascii_line)

        # Could easily make a "clean gadget" type class to prevent duplicate functionality
        # of creating/comparing symbol names for functions and variables in much the same way.
        # The comparison frozenset, symbol dictionaries, and counters would be class scope.
        # So would only need to pass a string list and a string literal for symbol names to
        # another function.
        # 这段代码的作用是将代码行中的函数名替换为相应的符号名称，并记录下已经替换过的函数名及其对应的符号名称，以保持唯一性。
        for fun_name in user_fun:
            if len({fun_name}.difference(main_set)) != 0 and len({fun_name}.difference(keywords)) != 0:
                # DEBUG
                # print('comparing ' + str(fun_name + ' to ' + str(main_set)))
                # print(fun_name + ' diff len from main is ' + str(len({fun_name}.difference(main_set))))
                # print('comparing ' + str(fun_name + ' to ' + str(keywords)))
                # print(fun_name + ' diff len from keywords is ' + str(len({fun_name}.difference(keywords))))
                ###
                # check to see if function name already in dictionary
                if fun_name not in fun_symbols.keys():
                    fun_symbols[fun_name] = 'FUN' + str(fun_count)
                    fun_count += 1
                # ensure that only function name gets replaced (no variable name with same
                # identifier); uses positive lookforward
                ascii_line = re.sub(r'\b(' + fun_name + r')\b(?=\s*\()',
                                    fun_symbols[fun_name], ascii_line)

        for var_name in user_var:
            # next line is the nuanced difference between fun_name and var_name
            if len({var_name}.difference(keywords)) != 0 and len({var_name}.difference(main_args)) != 0:
                # DEBUG
                # print('comparing ' + str(var_name + ' to ' + str(keywords)))
                # print(var_name + ' diff len from keywords is ' + str(len({var_name}.difference(keywords))))
                # print('comparing ' + str(var_name + ' to ' + str(main_args)))
                # print(var_name + ' diff len from main args is ' + str(len({var_name}.difference(main_args))))
                ###
                # check to see if variable name already in dictionary
                if var_name not in var_symbols.keys():
                    var_symbols[var_name] = 'VAR' + str(var_count)
                    var_count += 1
                # ensure that only variable name gets replaced (no function name with same
                # identifier); uses negative lookforward
                ascii_line = re.sub(
                    r'\b(' + var_name +
                    r')\b(?:(?=\s*\w+\()|(?!\s*\w+))(?!\s*\()',
                    var_symbols[var_name], ascii_line)

        cleaned_gadget.append(ascii_line)
    # return the list of cleaned lines
    return cleaned_gadget

# 这段代码用于将代码行转换为标记（tokens）的列表。
# 代码逐个字符地遍历输入的代码行 line，并根据字符的特征进行处理和分类。
def tokenize_code_line(line: str, subtoken: bool):
    """
    transform a string of code line into list of tokens

    Args:
        line: code line
        subtoken: whether to split into subtokens

    Returns:

    """
    tmp, w = [], []
    i = 0
    while i < len(line):
        # Ignore spaces and combine previously collected chars to form words
        # 如果当前字符是空格，则将之前收集到的字符组合成一个单词，并添加到 tmp 列表中
        # 然后将空格字符添加到 tmp 列表中。
        if line[i] == ' ':
            tmp.append(''.join(w).strip())
            tmp.append(line[i].strip())
            # 重置 w 列表（用于收集字符）为空，将索引 i 加 1。
            w = []
            i += 1
        # Check operators and append to final list
        '''
            如果当前字符加上后面两个字符形成的字符串是操作符（operators3 列表中的元素），
            则将之前收集到的字符组合成一个单词，并添加到 tmp 列表中。
            然后将该操作符字符串添加到 tmp 列表中，并重置 w 列表为空，将索引 i 加 3。
        '''
        elif line[i:i + 3] in operators3:
            tmp.append(''.join(w).strip())
            tmp.append(line[i:i + 3].strip())
            w = []
            i += 3
        '''
            如果当前字符加上后面一个字符形成的字符串是操作符（operators2 列表中的元素），
            则将之前收集到的字符组合成一个单词，并添加到 tmp 列表中。
            然后将该操作符字符串添加到 tmp 列表中，并重置 w 列表为空，将索引 i 加 2。
        '''
        elif line[i:i + 2] in operators2:
            tmp.append(''.join(w).strip())
            tmp.append(line[i:i + 2].strip())
            w = []
            i += 2
        '''
            如果当前字符是操作符（operators1 列表中的元素），
            则将之前收集到的字符组合成一个单词，并添加到 tmp 列表中。
            然后将该操作符添加到 tmp 列表中，并重置 w 列表为空，将索引 i 加 1。
        '''
        elif line[i] in operators1:
            tmp.append(''.join(w).strip())
            tmp.append(line[i].strip())
            w = []
            i += 1
        # Character appended to word list
        # 如果以上条件都不满足，则将当前字符添加到 w 列表中，并将索引 i 加 1。
        else:
            w.append(line[i])
            i += 1
    # 最后，如果 w 列表中还有剩余的字符，将它们组合成一个单词，并添加到 tmp 列表中。
    if (len(w) != 0):
        tmp.append(''.join(w).strip())
        w = []
    #  过滤掉 tmp 列表中的空字符串和空格字符串。
    tmp = list(filter(lambda c: (c != '' and c != ' '), tmp))
    # split subtoken
    res = list()
    # 如果 subtoken 参数为 True，则将每个标记进一步拆分为子标记（subtokens），并将拆分后的子标记添加到最终的结果列表 res 中。
    if (subtoken):
        for token in tmp:
            res.extend(wn.split(token))
    # 如果 subtoken 参数为 False，则将 tmp 列表中的标记直接作为结果列表 res
    else:
        res = tmp
    # 最终，函数返回结果列表 res，其中包含了代码行转换后的标记序列。
    return res
